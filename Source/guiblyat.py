#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.1
#  in conjunction with Tcl version 8.6
#    May 05, 2020 01:08:43 AM IST  platform: Windows NT
import os
import sys
import ACR
from tkinter import messagebox
import numpy as np
import pytesseract
import cv2
from PIL import ImageFont, ImageDraw, Image
from tkinter import filedialog
from zipfile import ZipFile
from tkinter.scrolledtext import ScrolledText
import ocr1
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import guiblyat_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = ocr (root)
    guiblyat_support.init(root, top)
    root.mainloop()

w = None
def create_ocr(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ocr(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = ocr (w)
    guiblyat_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ocr():
    os.remove("output.png")
    global w
    w.destroy()
    w = None

class ocr:
    def openhelp(self):
        os.startfile("help.txt")
    
    def saveimg(self):
        msg=filedialog.asksaveasfilename(initialdir='/', title="Save As", filetypes=(("JPEG","*.jpg"),("All Files","*.*")))
        if(msg):
            op=cv2.imread("output.png")
            msg=msg+".jpg"
            cv2.imwrite(msg,op)
            #os.remove("output.png")
            tk.messagebox.askokcancel("Asian Character Recognizer", "File Saved Successfully.")
        else:
            tk.messagebox.askokcancel("Asian Character Recognizer", "File Could Not Be Saved.")
            
    def strt(self):
        imgs = filedialog.askopenfilename(initialdir = "/", title = "Select Image", filetypes = (("jpeg files","*.jpg"),("all files","*.*")))
        if(not(imgs)):
            tk.messagebox.askokcancel("Asian Character Recognizer","The File Doesn't Exist")
        else:
            text,org,op = ocr1.ocr.actual(imgs)
            cv2.imwrite("original.png",org)
            cv2.imwrite("output.png",op)
            org1 = tk.PhotoImage(file="original.png")
            label = tk.Label(image=org1)
            label.image = org1 
            op2=tk.PhotoImage(file="output.png")
            label = tk.Label(image=op2)
            label.image = op2
            self.Canvas1.create_image(0,0,anchor="nw",image=org1)
            self.Canvas2.create_image(0,0,anchor="nw",image=op2)
            os.remove("original.png")
            self.Scrolledtext1.configure(state='normal')
            self.Scrolledtext1.insert('insert', text)
            self.Scrolledtext1.configure(state='disabled')
            
            
            
    def backpg(self):
        msg=tk.messagebox.askyesno("Asian Character Recognizer", "Are you sure you want to go back?")
        if(msg):
            guiblyat_support.destroy_window()
            guiblyat1.vp_start_gui()
            
    def exitconf(self):
        msg=tk.messagebox.askyesno("Asian Character Recognizer", "Are you sure you want to quit?")
        if(msg):
            guiblyat_support.destroy_window()
            
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("583x375+650+150")
        top.minsize(148, 1)
        top.maxsize(1924, 1030)
        top.resizable(1, 1)
        top.title("Asian Character Recognizer")
        top.configure(background="#000000")
        top.configure(highlightbackground="#000000")
        top.configure(highlightcolor="white")
        

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="File")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Save Result Image",
                command=lambda: self.saveimg())
        self.sub_menu1 = tk.Menu(top,tearoff=0)
        self.menubar.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="Help",
                command = lambda: self.openhelp())
        self.menubar.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=lambda :guiblyat_support.destroy_window(),
                font="TkMenuFont",
                foreground="#000000",
                label="Exit")

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.166, rely=0.851, height=33, width=126)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Start''')
        self.Button2.configure(command = lambda: self.strt())

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.6, rely=0.853, height=33, width=126)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Close''')
        self.Button3.configure(command = lambda: self.exitconf())

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.017, rely=0.613, relheight=0.179
                                 , relwidth=0.961)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="none")
        self.Scrolledtext1.configure(state='disabled')


        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.103, rely=0.08, relheight=0.488, relwidth=0.34)

        self.Canvas1.configure(background="#000000")
        self.Canvas1.configure(borderwidth="0")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")

        self.Canvas2 = tk.Canvas(top)
        self.Canvas2.place(relx=0.566, rely=0.08, relheight=0.488
                , relwidth=0.322)
        self.Canvas2.configure(background="#000000")
        self.Canvas2.configure(borderwidth="0")
        self.Canvas2.configure(insertbackground="black")
        self.Canvas2.configure(relief="ridge")
        self.Canvas2.configure(selectbackground="#c4c4c4")
        self.Canvas2.configure(selectforeground="black")

if __name__ == '__main__':
    vp_start_gui()





